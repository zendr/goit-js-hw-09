{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,MAAOC,SAASC,cAAc,UAC9BC,OAAQF,SAASC,cAAc,WAQ5BC,OAAOC,iBAAiB,SAE7B,SAAiBC,GAGf,GAFAA,EAAIC,iBAEuB,WAAvBD,EAAIE,OAAOC,QACb,OAGF,IAEqBC,EAAjBJ,EAAIK,cADNC,SAAYC,EAAKH,EAALI,MAAOC,EAAIL,EAAJK,KAAMC,EAAMN,EAANM,OAGvBC,EAAcC,OAAOF,EAAOG,OAC5BC,EAAaF,OAAOL,EAAMM,OAC1BE,EAAYH,OAAOH,EAAKI,OAM5BN,EAAQO,EAER,IAAK,IAAIE,EAAW,EAAGA,GAAYL,EAAaK,GAAY,EAC1DC,EAAc,CAAEC,SAAAF,EAAUR,MAAAD,IACvBY,MAAK,SAAAC,G,IAAGF,EAAQE,EAARF,SAAUV,EAAKY,EAALZ,MACjBf,EAAA4B,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANf,EAAM,M,IAE9DgB,OAAM,SAAAJ,G,IAAGF,EAAQE,EAARF,SAAUV,EAAKY,EAALZ,MAClBf,EAAA4B,OAAOI,QAAQ,sBAAqCF,OAAfL,EAAS,QAAYK,OAANf,EAAM,M,IAE9DD,GAASQ,EAIX,SAASE,EAAcG,G,IAAEF,EAAFE,EAAEF,SAAUV,EAAZY,EAAYZ,MAEjC,OAAO,IAAIkB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,IAIpCJ,EAAQ,CAAET,WAAUV,UAGtBoB,EAAO,CAAEV,WAAUV,S,GAClBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  btnEl: document.querySelector('button'),\n  formEl: document.querySelector('.form'),\n\n  // inputDelayEl: document.querySelector('input[name=\"delay\"]'),\n  // inputStepEl: document.querySelector('input[name=\"step\"]'),\n  // inputAmountEl: document.querySelector('input[name=\"amount\"]'),\n\n}\n\nrefs.formEl.addEventListener('click', onClick);\n\nfunction onClick(evt) {\n  evt.preventDefault();\n\n  if (evt.target.tagName !== 'BUTTON') {\n    return;\n  }\n\n  let {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n \n  let amountValue = Number(amount.value);\n  let firstDelay = Number(delay.value);\n  let stepValue = Number(step.value);\n\n  // console.log(firstDelay);\n  // console.log(stepValue);\n  // console.log(amountValue);\n\n  delay = firstDelay;\n\n  for (let position = 1; position <= amountValue; position += 1) {\n    createPromise({ position, delay })\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      })\n    delay += stepValue;\n  }\n\n  \n  function createPromise({ position, delay }) {\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        // console.log(shouldResolve);  \n        if (shouldResolve) {\n          // Fulfill   \n          resolve({ position, delay });\n        }\n        // Reject\n        reject({ position, delay });\n      }, delay);\n    });\n  }\n}"],"names":["$h6c0i","parcelRequire","btnEl","document","querySelector","formEl","addEventListener","evt","preventDefault","target","tagName","_elements","currentTarget","elements","delay1","delay","step","amount","amountValue","Number","value","firstDelay","stepValue","position1","createPromise","position","then","param","Notify","success","concat","catch","failure","Promise","resolve","reject","setTimeout","Math","random"],"version":3,"file":"03-promises.414b7764.js.map"}